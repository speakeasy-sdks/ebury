/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContactUpdate - The data of a contact which can be updated.
 */

public class ContactUpdate {
    /**
     * True if contact can authorise payments, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_authorise_payments")
    public Boolean canAuthorisePayments;

    public ContactUpdate withCanAuthorisePayments(Boolean canAuthorisePayments) {
        this.canAuthorisePayments = canAuthorisePayments;
        return this;
    }
    
    /**
     * True if contact can create trades and assign same currency payments, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_make_same_currency_payments")
    public Boolean canMakeSameCurrencyPayments;

    public ContactUpdate withCanMakeSameCurrencyPayments(Boolean canMakeSameCurrencyPayments) {
        this.canMakeSameCurrencyPayments = canMakeSameCurrencyPayments;
        return this;
    }
    
    /**
     * True if contact can manage beneficiaries, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_beneficiaries")
    public Boolean canManageBeneficiaries;

    public ContactUpdate withCanManageBeneficiaries(Boolean canManageBeneficiaries) {
        this.canManageBeneficiaries = canManageBeneficiaries;
        return this;
    }
    
    /**
     * True if can manage beneficiaries groups, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_beneficiaries_groups")
    public Boolean canManageBeneficiariesGroups;

    public ContactUpdate withCanManageBeneficiariesGroups(Boolean canManageBeneficiariesGroups) {
        this.canManageBeneficiariesGroups = canManageBeneficiariesGroups;
        return this;
    }
    
    /**
     * True if contact can manage contacts, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_contacts")
    public Boolean canManageContacts;

    public ContactUpdate withCanManageContacts(Boolean canManageContacts) {
        this.canManageContacts = canManageContacts;
        return this;
    }
    
    /**
     * True if contact can manage fixed forwards, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_fix_forwards")
    public Boolean canManageFixForwards;

    public ContactUpdate withCanManageFixForwards(Boolean canManageFixForwards) {
        this.canManageFixForwards = canManageFixForwards;
        return this;
    }
    
    /**
     * True if contact can manage multipayments, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_multipayments")
    public Boolean canManageMultipayments;

    public ContactUpdate withCanManageMultipayments(Boolean canManageMultipayments) {
        this.canManageMultipayments = canManageMultipayments;
        return this;
    }
    
    /**
     * True if contact can manage payments, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_payments")
    public Boolean canManagePayments;

    public ContactUpdate withCanManagePayments(Boolean canManagePayments) {
        this.canManagePayments = canManagePayments;
        return this;
    }
    
    /**
     * True if contact can manage permissions, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_manage_permissions")
    public Boolean canManagePermissions;

    public ContactUpdate withCanManagePermissions(Boolean canManagePermissions) {
        this.canManagePermissions = canManagePermissions;
        return this;
    }
    
    /**
     * True if contact can execute trades, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_trade")
    public Boolean canTrade;

    public ContactUpdate withCanTrade(Boolean canTrade) {
        this.canTrade = canTrade;
        return this;
    }
    
    /**
     * True if contact has access to Ebury Online, False otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_online_access")
    public Boolean hasOnlineAccess;

    public ContactUpdate withHasOnlineAccess(Boolean hasOnlineAccess) {
        this.hasOnlineAccess = hasOnlineAccess;
        return this;
    }
    
    /**
     * The ISO 639-1:2002 code of the contact's language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public ContactUpdate withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The ISO 639-1:2002 code of the contact's locale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    public String locale;

    public ContactUpdate withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * The time zone of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_zone")
    public String timeZone;

    public ContactUpdate withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    public ContactUpdate(){}
}
