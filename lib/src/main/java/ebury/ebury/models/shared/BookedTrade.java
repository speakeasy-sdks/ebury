/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * BookedTrade - Returns a BookedTrade model
 */

public class BookedTrade {
    /**
     * Buy amount
     */
    @JsonProperty("buy_amount")
    public Float buyAmount;

    public BookedTrade withBuyAmount(Float buyAmount) {
        this.buyAmount = buyAmount;
        return this;
    }
    
    /**
     * Buy currency code
     */
    @JsonProperty("buy_currency")
    public String buyCurrency;

    public BookedTrade withBuyCurrency(String buyCurrency) {
        this.buyCurrency = buyCurrency;
        return this;
    }
    
    /**
     * Fee amount
     */
    @JsonProperty("fee_amount")
    public Float feeAmount;

    public BookedTrade withFeeAmount(Float feeAmount) {
        this.feeAmount = feeAmount;
        return this;
    }
    
    /**
     * Fee currency
     */
    @JsonProperty("fee_currency")
    public String feeCurrency;

    public BookedTrade withFeeCurrency(String feeCurrency) {
        this.feeCurrency = feeCurrency;
        return this;
    }
    
    /**
     * Limit date and time (UTC) in which funds must be received by Ebury
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("maturity_date")
    public LocalDate maturityDate;

    public BookedTrade withMaturityDate(LocalDate maturityDate) {
        this.maturityDate = maturityDate;
        return this;
    }
    
    /**
     * Order date
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("order_date")
    public LocalDate orderDate;

    public BookedTrade withOrderDate(LocalDate orderDate) {
        this.orderDate = orderDate;
        return this;
    }
    
    /**
     * Parent trade ID (not null for drawdown deals)
     */
    @JsonProperty("parent_trade_id")
    public String parentTradeId;

    public BookedTrade withParentTradeId(String parentTradeId) {
        this.parentTradeId = parentTradeId;
        return this;
    }
    
    /**
     * Booked rate
     */
    @JsonProperty("rate")
    public Float rate;

    public BookedTrade withRate(Float rate) {
        this.rate = rate;
        return this;
    }
    
    /**
     * The symbol of booked rate
     */
    @JsonProperty("rate_symbol")
    public String rateSymbol;

    public BookedTrade withRateSymbol(String rateSymbol) {
        this.rateSymbol = rateSymbol;
        return this;
    }
    
    /**
     * Additional trade reference. Example: Invoice number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public BookedTrade withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Sell amount
     */
    @JsonProperty("sell_amount")
    public Float sellAmount;

    public BookedTrade withSellAmount(Float sellAmount) {
        this.sellAmount = sellAmount;
        return this;
    }
    
    /**
     * Sell currency code
     */
    @JsonProperty("sell_currency")
    public String sellCurrency;

    public BookedTrade withSellCurrency(String sellCurrency) {
        this.sellCurrency = sellCurrency;
        return this;
    }
    
    /**
     * Status of the trade
     */
    @JsonProperty("status")
    public TradeStatus status;

    public BookedTrade withStatus(TradeStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Identifies as a synthetic future contracts
     */
    @JsonProperty("synthetic")
    public Boolean synthetic;

    public BookedTrade withSynthetic(Boolean synthetic) {
        this.synthetic = synthetic;
        return this;
    }
    
    /**
     * Trade identifier
     */
    @JsonProperty("trade_id")
    public String tradeId;

    public BookedTrade withTradeId(String tradeId) {
        this.tradeId = tradeId;
        return this;
    }
    
    /**
     * The URL to get the trade receipt
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trade_receipt")
    public String tradeReceipt;

    public BookedTrade withTradeReceipt(String tradeReceipt) {
        this.tradeReceipt = tradeReceipt;
        return this;
    }
    
    /**
     * Trade type
     */
    @JsonProperty("trade_type")
    public String tradeType;

    public BookedTrade withTradeType(String tradeType) {
        this.tradeType = tradeType;
        return this;
    }
    
    public BookedTrade(@JsonProperty("buy_amount") Float buyAmount, @JsonProperty("buy_currency") String buyCurrency, @JsonProperty("fee_amount") Float feeAmount, @JsonProperty("fee_currency") String feeCurrency, @JsonProperty("maturity_date") LocalDate maturityDate, @JsonProperty("order_date") LocalDate orderDate, @JsonProperty("parent_trade_id") String parentTradeId, @JsonProperty("rate") Float rate, @JsonProperty("rate_symbol") String rateSymbol, @JsonProperty("sell_amount") Float sellAmount, @JsonProperty("sell_currency") String sellCurrency, @JsonProperty("status") TradeStatus status, @JsonProperty("synthetic") Boolean synthetic, @JsonProperty("trade_id") String tradeId, @JsonProperty("trade_type") String tradeType) {
        this.buyAmount = buyAmount;
        this.buyCurrency = buyCurrency;
        this.feeAmount = feeAmount;
        this.feeCurrency = feeCurrency;
        this.maturityDate = maturityDate;
        this.orderDate = orderDate;
        this.parentTradeId = parentTradeId;
        this.rate = rate;
        this.rateSymbol = rateSymbol;
        this.sellAmount = sellAmount;
        this.sellCurrency = sellCurrency;
        this.status = status;
        this.synthetic = synthetic;
        this.tradeId = tradeId;
        this.tradeType = tradeType;
  }
}
