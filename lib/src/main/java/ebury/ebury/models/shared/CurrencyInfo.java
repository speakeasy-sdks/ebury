/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class CurrencyInfo {
    /**
     * Is this currency available to trade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_for_trading")
    public Boolean availableForTrading;

    public CurrencyInfo withAvailableForTrading(Boolean availableForTrading) {
        this.availableForTrading = availableForTrading;
        return this;
    }
    
    /**
     * Is client allowed to buy this currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buy_allowed")
    public Boolean buyAllowed;

    public CurrencyInfo withBuyAllowed(Boolean buyAllowed) {
        this.buyAllowed = buyAllowed;
        return this;
    }
    
    /**
     * Limit of the credit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credit_limit")
    public String creditLimit;

    public CurrencyInfo withCreditLimit(String creditLimit) {
        this.creditLimit = creditLimit;
        return this;
    }
    
    /**
     * Currency symbol
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public CurrencyInfo withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Limit of the currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_limit")
    public String currencyLimit;

    public CurrencyInfo withCurrencyLimit(String currencyLimit) {
        this.currencyLimit = currencyLimit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cutoff")
    public CurrencyInfoCutoff cutoff;

    public CurrencyInfo withCutoff(CurrencyInfoCutoff cutoff) {
        this.cutoff = cutoff;
        return this;
    }
    
    /**
     * Decimal settings of the client for the currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimals")
    public Long decimals;

    public CurrencyInfo withDecimals(Long decimals) {
        this.decimals = decimals;
        return this;
    }
    
    /**
     * Is this default currency of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    public Boolean default_;

    public CurrencyInfo withDefault(Boolean default_) {
        this.default_ = default_;
        return this;
    }
    
    /**
     * List of holidays in a format ISO-8601
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("holidays")
    public String[] holidays;

    public CurrencyInfo withHolidays(String[] holidays) {
        this.holidays = holidays;
        return this;
    }
    
    /**
     * Is client allowed to sell this currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell_allowed")
    public Boolean sellAllowed;

    public CurrencyInfo withSellAllowed(Boolean sellAllowed) {
        this.sellAllowed = sellAllowed;
        return this;
    }
    
    public CurrencyInfo(){}
}
