/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NewBeneficiary - The core data of a beneficiary.
 */

public class NewBeneficiary {
    /**
     * The account number of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    public String accountNumber;

    public NewBeneficiary withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * The first address line of the beneficiary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_line_1")
    public String addressLine1;

    public NewBeneficiary withAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
    }
    
    /**
     * The first address line of the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_address_line_1")
    public String bankAddressLine1;

    public NewBeneficiary withBankAddressLine1(String bankAddressLine1) {
        this.bankAddressLine1 = bankAddressLine1;
        return this;
    }
    
    /**
     * The ISO 3166-1 alpha-2 code of the bank's country.
     */
    @JsonProperty("bank_country_code")
    public String bankCountryCode;

    public NewBeneficiary withBankCountryCode(String bankCountryCode) {
        this.bankCountryCode = bankCountryCode;
        return this;
    }
    
    /**
     * The ISO 4217 code of the bank account's currency.
     */
    @JsonProperty("bank_currency_code")
    public String bankCurrencyCode;

    public NewBeneficiary withBankCurrencyCode(String bankCurrencyCode) {
        this.bankCurrencyCode = bankCurrencyCode;
        return this;
    }
    
    /**
     * The identifier of the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_identifier")
    public String bankIdentifier;

    public NewBeneficiary withBankIdentifier(String bankIdentifier) {
        this.bankIdentifier = bankIdentifier;
        return this;
    }
    
    /**
     * Name of the bank account holder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    public String bankName;

    public NewBeneficiary withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     * The reference for the beneficiary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beneficiary_reference")
    public String beneficiaryReference;

    public NewBeneficiary withBeneficiaryReference(String beneficiaryReference) {
        this.beneficiaryReference = beneficiaryReference;
        return this;
    }
    
    /**
     * The account for the correspondant account of the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correspondent_account")
    public String correspondentAccount;

    public NewBeneficiary withCorrespondentAccount(String correspondentAccount) {
        this.correspondentAccount = correspondentAccount;
        return this;
    }
    
    /**
     * The SWIFT code for the correspondant account of the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correspondent_swift_code")
    public String correspondentSwiftCode;

    public NewBeneficiary withCorrespondentSwiftCode(String correspondentSwiftCode) {
        this.correspondentSwiftCode = correspondentSwiftCode;
        return this;
    }
    
    /**
     * The ISO 3166-1 alpha-2 code of the beneficiary's country.
     */
    @JsonProperty("country_code")
    public String countryCode;

    public NewBeneficiary withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The list of beneficiary's email addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_addresses")
    public String[] emailAddresses;

    public NewBeneficiary withEmailAddresses(String[] emailAddresses) {
        this.emailAddresses = emailAddresses;
        return this;
    }
    
    /**
     * Whether the beneficiary should receive email notification of payments.
     */
    @JsonProperty("email_notification")
    public Boolean emailNotification;

    public NewBeneficiary withEmailNotification(Boolean emailNotification) {
        this.emailNotification = emailNotification;
        return this;
    }
    
    /**
     * The IBAN of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    public String iban;

    public NewBeneficiary withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     * The INN of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inn")
    public String inn;

    public NewBeneficiary withInn(String inn) {
        this.inn = inn;
        return this;
    }
    
    /**
     * The KBK of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kbk")
    public String kbk;

    public NewBeneficiary withKbk(String kbk) {
        this.kbk = kbk;
        return this;
    }
    
    /**
     * The KIO of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kio")
    public String kio;

    public NewBeneficiary withKio(String kio) {
        this.kio = kio;
        return this;
    }
    
    /**
     * The KPP of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kpp")
    public String kpp;

    public NewBeneficiary withKpp(String kpp) {
        this.kpp = kpp;
        return this;
    }
    
    /**
     * The name of the beneficiary.
     */
    @JsonProperty("name")
    public String name;

    public NewBeneficiary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The post code of the beneficiary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_code")
    public String postCode;

    public NewBeneficiary withPostCode(String postCode) {
        this.postCode = postCode;
        return this;
    }
    
    /**
     * Text explaining the purpose of payment. Required by the Central Bank for all payments sent to China (CHN) in the Chinese Renminbi (CNY) currency or United Arab Emirates in any currency (GDE to RDA) [Coming soon].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose_of_payment")
    public NewBeneficiaryPurposeOfPayment purposeOfPayment;

    public NewBeneficiary withPurposeOfPayment(NewBeneficiaryPurposeOfPayment purposeOfPayment) {
        this.purposeOfPayment = purposeOfPayment;
        return this;
    }
    
    /**
     * The reason for trade of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason_for_trade")
    public String reasonForTrade;

    public NewBeneficiary withReasonForTrade(String reasonForTrade) {
        this.reasonForTrade = reasonForTrade;
        return this;
    }
    
    /**
     * The reference information of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_information")
    public String referenceInformation;

    public NewBeneficiary withReferenceInformation(String referenceInformation) {
        this.referenceInformation = referenceInformation;
        return this;
    }
    
    /**
     * The Russian central account number of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("russian_central_bank_account")
    public String russianCentralBankAccount;

    public NewBeneficiary withRussianCentralBankAccount(String russianCentralBankAccount) {
        this.russianCentralBankAccount = russianCentralBankAccount;
        return this;
    }
    
    /**
     * The SWIFT code of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swift_code")
    public String swiftCode;

    public NewBeneficiary withSwiftCode(String swiftCode) {
        this.swiftCode = swiftCode;
        return this;
    }
    
    /**
     * The VO of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vo")
    public String vo;

    public NewBeneficiary withVo(String vo) {
        this.vo = vo;
        return this;
    }
    
    public NewBeneficiary(@JsonProperty("bank_country_code") String bankCountryCode, @JsonProperty("bank_currency_code") String bankCurrencyCode, @JsonProperty("country_code") String countryCode, @JsonProperty("email_notification") Boolean emailNotification, @JsonProperty("name") String name) {
        this.bankCountryCode = bankCountryCode;
        this.bankCurrencyCode = bankCurrencyCode;
        this.countryCode = countryCode;
        this.emailNotification = emailNotification;
        this.name = name;
  }
}
