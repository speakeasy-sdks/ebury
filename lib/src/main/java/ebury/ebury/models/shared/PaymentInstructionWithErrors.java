/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class PaymentInstructionWithErrors {
    /**
     * Destination account number
     */
    @JsonProperty("account_number")
    public String accountNumber;

    public PaymentInstructionWithErrors withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * Destination bank address
     */
    @JsonProperty("bank_address")
    public String bankAddress;

    public PaymentInstructionWithErrors withBankAddress(String bankAddress) {
        this.bankAddress = bankAddress;
        return this;
    }
    
    /**
     * Destination bank code
     */
    @JsonProperty("bank_code")
    public String bankCode;

    public PaymentInstructionWithErrors withBankCode(String bankCode) {
        this.bankCode = bankCode;
        return this;
    }
    
    /**
     * Destination bank country
     */
    @JsonProperty("bank_country")
    public String bankCountry;

    public PaymentInstructionWithErrors withBankCountry(String bankCountry) {
        this.bankCountry = bankCountry;
        return this;
    }
    
    /**
     * Destination bank name
     */
    @JsonProperty("bank_name")
    public String bankName;

    public PaymentInstructionWithErrors withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     * Address of beneficiary
     */
    @JsonProperty("beneficiary_address")
    public String beneficiaryAddress;

    public PaymentInstructionWithErrors withBeneficiaryAddress(String beneficiaryAddress) {
        this.beneficiaryAddress = beneficiaryAddress;
        return this;
    }
    
    /**
     * Country of beneficiary
     */
    @JsonProperty("beneficiary_country")
    public String beneficiaryCountry;

    public PaymentInstructionWithErrors withBeneficiaryCountry(String beneficiaryCountry) {
        this.beneficiaryCountry = beneficiaryCountry;
        return this;
    }
    
    /**
     * Name of beneficiary
     */
    @JsonProperty("beneficiary_name")
    public String beneficiaryName;

    public PaymentInstructionWithErrors withBeneficiaryName(String beneficiaryName) {
        this.beneficiaryName = beneficiaryName;
        return this;
    }
    
    /**
     * Reference of beneficiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beneficiary_reference")
    public String beneficiaryReference;

    public PaymentInstructionWithErrors withBeneficiaryReference(String beneficiaryReference) {
        this.beneficiaryReference = beneficiaryReference;
        return this;
    }
    
    /**
     * Type of payment, 'buy' or 'sell'
     */
    @JsonProperty("direction")
    public PaymentInstructionWithErrorsDirection direction;

    public PaymentInstructionWithErrors withDirection(PaymentInstructionWithErrorsDirection direction) {
        this.direction = direction;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public PaymentInstructionWithErrorsErrors[] errors;

    public PaymentInstructionWithErrors withErrors(PaymentInstructionWithErrorsErrors[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * IBAN of the destination account
     */
    @JsonProperty("iban")
    public String iban;

    public PaymentInstructionWithErrors withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     * The INN of the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inn")
    public String inn;

    public PaymentInstructionWithErrors withInn(String inn) {
        this.inn = inn;
        return this;
    }
    
    /**
     * The KIO of the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kio")
    public String kio;

    public PaymentInstructionWithErrors withKio(String kio) {
        this.kio = kio;
        return this;
    }
    
    /**
     * Amount to be paid
     */
    @JsonProperty("payment_amount")
    public Float paymentAmount;

    public PaymentInstructionWithErrors withPaymentAmount(Float paymentAmount) {
        this.paymentAmount = paymentAmount;
        return this;
    }
    
    /**
     * Destination currency
     */
    @JsonProperty("payment_currency")
    public String paymentCurrency;

    public PaymentInstructionWithErrors withPaymentCurrency(String paymentCurrency) {
        this.paymentCurrency = paymentCurrency;
        return this;
    }
    
    /**
     * Reference of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_reference")
    public String paymentReference;

    public PaymentInstructionWithErrors withPaymentReference(String paymentReference) {
        this.paymentReference = paymentReference;
        return this;
    }
    
    /**
     * Text describing the purpose of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose_of_payment")
    public String purposeOfPayment;

    public PaymentInstructionWithErrors withPurposeOfPayment(String purposeOfPayment) {
        this.purposeOfPayment = purposeOfPayment;
        return this;
    }
    
    /**
     * Reason for trade
     */
    @JsonProperty("reason_for_trade")
    public String reasonForTrade;

    public PaymentInstructionWithErrors withReasonForTrade(String reasonForTrade) {
        this.reasonForTrade = reasonForTrade;
        return this;
    }
    
    /**
     * Payment reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public PaymentInstructionWithErrors withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Russian central bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("russian_central_bank_account")
    public String russianCentralBankAccount;

    public PaymentInstructionWithErrors withRussianCentralBankAccount(String russianCentralBankAccount) {
        this.russianCentralBankAccount = russianCentralBankAccount;
        return this;
    }
    
    /**
     * SWIFT code of destination bank
     */
    @JsonProperty("swift_code")
    public String swiftCode;

    public PaymentInstructionWithErrors withSwiftCode(String swiftCode) {
        this.swiftCode = swiftCode;
        return this;
    }
    
    /**
     * Type of trade. 'spot' is the only supported value at the moment
     */
    @JsonProperty("trade_type")
    public PaymentInstructionWithErrorsTradeType tradeType;

    public PaymentInstructionWithErrors withTradeType(PaymentInstructionWithErrorsTradeType tradeType) {
        this.tradeType = tradeType;
        return this;
    }
    
    /**
     * Date when the transaction will be performed
     */
    @JsonProperty("value_date")
    public String valueDate;

    public PaymentInstructionWithErrors withValueDate(String valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    /**
     * The VO of the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vo")
    public String vo;

    public PaymentInstructionWithErrors withVo(String vo) {
        this.vo = vo;
        return this;
    }
    
    public PaymentInstructionWithErrors(@JsonProperty("account_number") String accountNumber, @JsonProperty("bank_address") String bankAddress, @JsonProperty("bank_code") String bankCode, @JsonProperty("bank_country") String bankCountry, @JsonProperty("bank_name") String bankName, @JsonProperty("beneficiary_address") String beneficiaryAddress, @JsonProperty("beneficiary_country") String beneficiaryCountry, @JsonProperty("beneficiary_name") String beneficiaryName, @JsonProperty("direction") PaymentInstructionWithErrorsDirection direction, @JsonProperty("iban") String iban, @JsonProperty("payment_amount") Float paymentAmount, @JsonProperty("payment_currency") String paymentCurrency, @JsonProperty("reason_for_trade") String reasonForTrade, @JsonProperty("swift_code") String swiftCode, @JsonProperty("trade_type") PaymentInstructionWithErrorsTradeType tradeType, @JsonProperty("value_date") String valueDate) {
        this.accountNumber = accountNumber;
        this.bankAddress = bankAddress;
        this.bankCode = bankCode;
        this.bankCountry = bankCountry;
        this.bankName = bankName;
        this.beneficiaryAddress = beneficiaryAddress;
        this.beneficiaryCountry = beneficiaryCountry;
        this.beneficiaryName = beneficiaryName;
        this.direction = direction;
        this.iban = iban;
        this.paymentAmount = paymentAmount;
        this.paymentCurrency = paymentCurrency;
        this.reasonForTrade = reasonForTrade;
        this.swiftCode = swiftCode;
        this.tradeType = tradeType;
        this.valueDate = valueDate;
  }
}
