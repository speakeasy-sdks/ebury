/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostTokenResponse - Access token and refresh token data
 */

public class PostTokenResponse {
    /**
     * An OAuth access token that can be used to call the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    public String accessToken;

    public PostTokenResponse withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Expiry period in seconds from time token returned, currently returns 3600 (1 hour).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    public String expiresIn;

    public PostTokenResponse withExpiresIn(String expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * A signed, base 64 encoded JSON Web Token that provides verification of the identity that authorized the request. The token includes the client identifier, which is a required parameter on the majority of API calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_token")
    public String idToken;

    public PostTokenResponse withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * An OAuth refresh token that can be used to get a new access token when when the last expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    public String refreshToken;

    public PostTokenResponse withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
    /**
     * The Authorization header scheme to use when making requests, will be Bearer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_type")
    public PostTokenResponseTokenType tokenType;

    public PostTokenResponse withTokenType(PostTokenResponseTokenType tokenType) {
        this.tokenType = tokenType;
        return this;
    }
    
    public PostTokenResponse(){}
}
