/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ebury.ebury;

import com.fasterxml.jackson.annotation.JsonValue;
import ebury.ebury.utils.HTTPClient;
import ebury.ebury.utils.SpeakeasyHTTPClient;

/**
 * Ebury API: Ebury API allows customers:
 *   to retrieve accounts, balances, beneficiaries, and transactions;
 *   to get buy/sell estimates and quotes, book trades and retrieve trade history;
 *   to allocate payments to a trade and beneficiary, and to submit payments in bulk;
 *   to download documents such as trade receipt, payment instruction and payment receipt;
 *   to manage the authorised persons on their account.
 * The Metadata API allows applications to clarify some parts of the Ebury API
 *   that are impractical to express schematically.
 * 
 */
public class Ebury {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://{environment}.ebury.io/",
	};
  	
    public AccountDetails accountDetails;
    public Accounts accounts;
    public Balances balances;
    public Beneficiaries beneficiaries;
    public Clients clients;
    public Contacts contacts;
    public Currencies currencies;
    public Documents documents;
    public Metadata metadata;
    public MultiPayments multiPayments;
    public OAuth20 oAuth20;
    public Payments payments;
    public Ping ping;
    public Quotes quotes;
    public StatementFetch statementFetch;
    public StatementsCreate statementsCreate;
    public Trades trades;
    public Transactions transactions;
    public TrustedAuthentication trustedAuthentication;
    public Webhooks webhooks;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(ebury.ebury.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = ebury.ebury.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
        public enum ServerEnvironment {
            API("api"),
            SANDBOX("sandbox");

            @JsonValue
            public final String value;

            private ServerEnvironment(String value) {
                this.value = value;
            }
        }

		/**
		 * Allows setting the $name variable for url substitution.
		 * @param environment The value to set.
		 * @return The builder instance.
		 */
		public Builder setEnvironment(ServerEnvironment environment) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("environment")) {
					continue;
				}
				server.put("environment", environment.toString());
			}

			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public Ebury build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = ebury.ebury.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new Ebury(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private Ebury(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.accountDetails = new AccountDetails(this.sdkConfiguration);
		
		this.accounts = new Accounts(this.sdkConfiguration);
		
		this.balances = new Balances(this.sdkConfiguration);
		
		this.beneficiaries = new Beneficiaries(this.sdkConfiguration);
		
		this.clients = new Clients(this.sdkConfiguration);
		
		this.contacts = new Contacts(this.sdkConfiguration);
		
		this.currencies = new Currencies(this.sdkConfiguration);
		
		this.documents = new Documents(this.sdkConfiguration);
		
		this.metadata = new Metadata(this.sdkConfiguration);
		
		this.multiPayments = new MultiPayments(this.sdkConfiguration);
		
		this.oAuth20 = new OAuth20(this.sdkConfiguration);
		
		this.payments = new Payments(this.sdkConfiguration);
		
		this.ping = new Ping(this.sdkConfiguration);
		
		this.quotes = new Quotes(this.sdkConfiguration);
		
		this.statementFetch = new StatementFetch(this.sdkConfiguration);
		
		this.statementsCreate = new StatementsCreate(this.sdkConfiguration);
		
		this.trades = new Trades(this.sdkConfiguration);
		
		this.transactions = new Transactions(this.sdkConfiguration);
		
		this.trustedAuthentication = new TrustedAuthentication(this.sdkConfiguration);
		
		this.webhooks = new Webhooks(this.sdkConfiguration);
	}
}